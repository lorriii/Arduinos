#include <FastIMU.h>

#define INTERVAL 20 //Интервал считываний

#define IMU_ADDRESS 0x69 //Адрес гироскопа
BMI160 IMU; //выбор модели гироскопа

calData calib = {0};   //массив для колибровки
AccelData accelData;   //данные акселерометра (используется структура AccelData)
GyroData gyroData;     //данные гироскопа (используется структура GyroDAta)

//переменные врепмени, для реализации интервала между считываниями
long my_time = millis();
long my_time_last = millis();


void setup() {
  Serial.begin(115200);
  
  //инициализируем гироскоп, если получили не 0, значит гироскоп подключился 
  int err = IMU.init(calib, IMU_ADDRESS);
  if (err != 0){
    Serial.print("Ошибки инициализации гироскопа: ");
    Serial.println(err);
    while(true){}
    }
  delay(1000);
  Serial.println("Не двигайте гироскоп, пока видите эту надпись!");
  delay(5000);
  IMU.calibrateAccelGyro(&calib); //Калибровка гироскопа (задание начального положения)
  delay(1000);
  err = IMU.init(calib, IMU_ADDRESS);   //Инициализация с откалиброванными параметрами

    
    
}

void loop() {
  my_time = millis();
  if (my_time - my_time_last > INTERVAL){
    IMU.update(); //получение данных с датчика

    IMU.getAccel(&accelData); // запись данных акселерометра в accelData
    IMU.getGyro(&gyroData);   //запись данных гироскопа в geroData

    //вывод данных акселерометра
    Serial.print(accelData.accelX);
    Serial.print(" ");
    Serial.print(accelData.accelY);
    Serial.print(" ");
    Serial.println(accelData.accelZ);
    Serial.println(" | ");
    
    //вывод данных гироскопа
    Serial.print(gyroData.gyroX);
    Serial.print(" ");
    Serial.print(gyroData.gyroY);
    Serial.print(" ");
    Serial.print(gyroData.gyroZ);
    Serial.print(" | ");
    my_time_last = my_time;
  }
  
}
