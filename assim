.dseg
	other_stack: .byte 2 ;указатель или адрес другого потока
.cseg 
.org $000 rjmp start

.MACRO SAVE_CONTEXT  ;макрос для сохранения регистров
	push r0
	push r1
	push r2
	push r3
	push r4
	push r5
	push r6
	push r7
	push r8
	push r9
	push r10
	push r11
	push r12
	push r13
	push r14
	push r15
	push r16
	push r17
	push r18
	push r19
	push r20
	push r21
	push r22
	push r23
	push r24
	push r25
	push r26
	push r27
	push r28
	push r29
	push r30
	push r31
	in r16, SREG ;сохранение всех регистров статуса
	push r16
.ENDMACRO

.MACRO GET_CONTEXT
	pop r16
	out SREG, r16
	pop r31
	pop r30
	pop r29
	pop r28
	pop r27
	pop r26
	pop r25
	pop r24
	pop r23
	pop r22
	pop r21
	pop r20
	pop r19
	pop r18
	pop r17
	pop r16
	pop r15
	pop r14
	pop r13
	pop r12
	pop r11
	pop r10
	pop r9
	pop r8
	pop r7
	pop r6
	pop r5
	pop r4
	pop r3
	pop r2
	pop r1
	pop r0
.ENDMACRO

task1:
	SAVE_CONTEXT
	in r16, spl
	in r17, sph
	lds r18, other_stack
	lds r19, other_stack + 1
	sts other_stack, r16
	sts other_stack + 1, r17
	out spl, r18
	out sph, r19
	GET_CONTEXT
	ret
branch:
	SAVE_CONTEXT ;запоминаем старый стек (данные для первого процесса)
	
	in r16, spl  ;считываем текущий указатель стека
	in r17, sph

	lds r18, other_stack  ;стек на который надо переключиться
	lds r19, other_stack + 1

	sts other_stack, r16  ;старый стек записываем в память
	sts other_stack + 1, r17

	out spl, r18
	out sph, r19

	;инициализируем стек второго потока
	ldi r16, low(RAMEND / 2)
	ldi r17, high(RAMEND / 2)
	out spl, r16
	out sph, r17

forever2:
	rcall task2
	rjmp forever2

task2: ;задача второго процесса
	ldi r16, 1
	mov r1, r16
	fib_loop:
		add r0, r0
		rcall task1 ;остановка второго потока, переключение на первый
		rjmp fib_loop

start:   
    ;инициализируем стек первого потока
	ldi r16, low(RAMEND)
	out spl, r16
	ldi r16, high(RAMEND)
	out sph, r16
	rcall branch ;создаем второй поток

forever:
	ldi r16, 1
	mov r0, r16
	loop:
		inc r0
		rcall task1
		rjmp forever

